# TodoType

enum Status {
  COMPLETE
  INCOMPLETE
}

# interface Error {
#   genericMessage: String
# }

type Todo {
  _id: ID!
  content: String!
  status: Status!
}

# type TodoError implements Error {
# type TodoError {
#   # genericMessage: String
#   todoError: String
# }

# type TodoDeleteSuccess implements Error {
#   genericMessage: String
#   deleteSuccess: String
# }

# union TodoResponse = Todo | TodoError | TodoDeleteSuccess
# union TodoResponse = Todo | TodoError

# type TodoArr {
#   Todos: [Todo]!
# }

# union TodoArrResponse = TodoArr | TodoError

type Query {
  todo(_id: ID!): Todo!
  todos: [Todo]!
}

type Mutation {
  makeTodo(content: String!): Todo!
  updateTodo(_id: ID!, content: String!): Todo!
  deleteTodo(_id: ID!): Boolean!
  updateStatus(_id: ID!, status: Status!): Todo!
}

# TODO: add users
# TODO: Add a subscription
