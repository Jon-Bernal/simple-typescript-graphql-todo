# TodoType

enum Status {
  COMPLETE
  INCOMPLETE
}

type Todo {
  _id: ID!
  userId: ID!
  content: String!
  status: Status!
}
type TodoError {
  source: String!
  message: String!
}

type TodoRes {
  errors: [TodoError]
  todo: Todo
}

type TodosRes {
  errors: [TodoError]
  todos: [Todo]
}

input MakeTodoInput {
  userId: String!
  content: String!
}

type Query {
  todo(userId: ID!, _id: ID!): Todo!
  todos(userId: ID!): TodosRes!
}

type Mutation {
  makeTodo(input: MakeTodoInput!): TodoRes!
  updateTodo(_id: ID!, content: String!): Todo!
  deleteTodo(_id: ID!): Boolean!
  updateStatus(_id: ID!, status: Status!): Todo!
}

# TODO: add users
# TODO: Add a subscription
