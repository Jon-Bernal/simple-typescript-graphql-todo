type User {
  _id: ID!
  username: String!
}

input UserLoginInput {
  username: String!
  password: String!
}

type LoginError {
  message: String!
}

# union LoginResponse = Token | LoginError

input UserRegisterInput {
  username: String!
  password: String!
  confirmPassword: String!
}

type RegisterError {
  message: String!
}

type Query {
  hello: String
  # user(_id: ID!): User!
  # users: [User]!
  # me(_id: ID!): User!
}

type LoginResponse {
  error: GeneralError
  errors: [InputError]
  user: User
  token: String
}

type RegisterResponse {
  error: GeneralError
  errors: [InputError]
  token: String
}

type Mutation {
  register(input: UserRegisterInput!): RegisterResponse!
  login(input: UserLoginInput!): LoginResponse!
  # login(input: UserLoginInput!): LoginResponse!
  # logout: Boolean!
}

# TODO: add users
# TODO: Add a subscription
