# UsersType

# interface Error {
#   genericMessage: String
# }

type Token {
  token: String!
}

type User {
  _id: ID!
  username: String!
}

# type UserData {
#   user: User
#   todos: [Todo]
#   comments: [Comment]
# }

# type UserDataError {
#   message: String
# }

# union UserDataRes = UserData | UserDataError

input UserLoginInput {
  username: String!
  password: String!
}

type LoginError {
  message: String!
}

union LoginResponse = Token | LoginError

input UserRegisterInput {
  username: String!
  password: String!
  confirmPassword: String!
}

type RegisterError {
  message: String!
}

type Query {
  user(_id: ID!): User!
  users: [User]!
  me(_id: ID!): User!
  # getUserData(_id: ID!): UserDataRes!
  # getUserData(_id: ID!): UserData!
}

union RegisterResponse = Token | RegisterError

type Mutation {
  register(input: UserRegisterInput!): RegisterResponse!
  login(input: UserLoginInput!): LoginResponse!
  logout: Boolean!
}

# TODO: add users
# TODO: Add a subscription
